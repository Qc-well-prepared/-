1.前端需要注意哪些SEO 
SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益。
合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可
语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页。
HTML5的革新—语义化标签
重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取
重要内容不要用js输出：爬虫不会执行js获取内容
少用iframe：搜索引擎不会抓取iframe中的内容
非装饰性图片必须加alt
alt是<img>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。
提高网站速度：网站速度是搜索引擎排序的一个重要指标

2.<img> 的 title 和 alt 有什么区别
图片中的 alt 属性是在图片不能正常显示时出现的文本提示。
图片中的 title 属性是在鼠标在移动到元素上的文本提示。

3.HTTP的几种请求方法以及其用途
1)Get方法
发送一个请求来取得服务器上的某一资源
2)Post方法
向URL指定的资源提交数据或附加新的数据
3)Put方法
跟Post方法很像，也是向服务器提交数据，但是，Put指向了资源在服务器上的位置，而Post没有
4)Head方法
只请求页面的首部
5)Delete方法
删除服务器上的某资源
6)Options方法
它用于获取当前URL所支持的方法。如果请求成功，会有一个Allow的头包含类似“Get,Post”这样的信息
7)Trace方法
Trace方法被用于激发一个远程的，应用层的请求消息回路
8)Connect方法
把请求连接转换到透明的TCP/IP通道

4.语义化的理解
语义化是根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。
语义化优点：
易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。
有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。
方便其他设备解析，如盲人阅读器根据语义渲染网页
有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐

5.从浏览器地址栏输入url到显示页面的步骤 （这道题尤为重要，BAT 面试题）
大概流程：
1、输入地址
2、浏览器查找域名的 IP 地址
3、浏览器向 web 服务器发送一个 HTTP 请求
4、服务器的永久重定向响应
6、服务器处理请求
7、服务器返回一个 HTTP 响应
8、浏览器显示 HTML
9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）

详细流程：
1)在浏览器地址栏输入URL
2)浏览器解析URL获取协议，主机，端口，path
3)浏览器组装一个HTTP（GET）请求报文
4)浏览器获取主机ip地址（从缓存、hosts、路由、DNS解析等）
5)与目标IP地址建立TCP链接，三次握手
6)TCP链接建立后发送HTTP请求
7)服务器接受请求并解析，将请求转发到服务程序
8)服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304
9)处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作
10)服务器将响应报文通过TCP连接发送回浏览器
11)浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，
12)如果资源可缓存，进行缓存
13)对响应进行解码（例如gzip压缩）
14)根据资源类型决定如何处理（假设资源为HTML文档）
15)解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释
16)构建DOM树：
17)根据HTML规范将字符流解析为标记
18)词法分析将标记转换为对象并定义属性和规则
19)根据HTML标记关系将对象组成DOM树
20)解析过程中遇到图片、样式表、js文件，启动下载
21)构建CSSOM树：
22)字符流转换为标记流
23)根据标记创建节点
24)节点创建CSSOM树
25)根据DOM树和CSSOM树构建渲染树:
26)从DOM树的根节点遍历所有可见节点，不可见节点包括：
- script，meta这样本身不可见的标签
- 被css隐藏的节点，如display: none
(1)对每一个可见节点，找到恰当的CSSOM规则并应用
(2)发布可视节点的内容和计算样式
(3)js解析如下：
(4)浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading
(5)HTML解析器遇到没有async和defer的script时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容
(6)当解析器遇到设置了async属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用document.write()，它们可以访问自己script和之前的文档元素
(7)当文档完成解析，document.readState变成interactive
(8)所有defer脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用document.write()
(9)浏览器在Document对象上触发DOMContentLoaded事件
(10)此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete，window触发load事件
(11)显示页面（HTML解析过程中会逐步显示页面）

